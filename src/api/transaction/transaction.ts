/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * TestWebApp.API
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getApiTransaction = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(`/api/Transaction`, options);
};

export const getGetApiTransactionQueryKey = () => {
  return [`/api/Transaction`] as const;
};

export const getGetApiTransactionQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTransaction>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransaction>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTransactionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiTransaction>>
  > = ({ signal }) => getApiTransaction({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransaction>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiTransactionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTransaction>>
>;
export type GetApiTransactionQueryError = AxiosError<unknown>;

export const useGetApiTransaction = <
  TData = Awaited<ReturnType<typeof getApiTransaction>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiTransaction>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiTransactionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
